#!/usr/bin/env bash


# Expected count 1 732 817 071

# curl -H "Content-type: application/json" -X POST \
# http://localhost:7280/api/v1/taxi/search/ \
# -d '{"query":"*","max_hits":0,"aggs":{"count(*)":{"value_count":{"field":"id"}}}}'

cmd="test=$test suffix=$suffix docker-compose -f ../../docker-compose.yml --env-file ../../.env up -d quickwit"
echo -e "\tStarting Quickwit ($cmd)"
eval "$cmd"

if timeout 60 docker logs -f quickwit_engine | grep -qm1 'REST server is ready'; then
  echo -e "\tQuickwit ready to accept connections"
else
  echo -e "\tQuickwit timeout failed"
  exit 1
fi

export HOST='http://localhost:7280'

if ! find ./quickwit/data/indexes/taxi/*.split > /dev/null 2>&1; then
  echo -e "\tStart building quickwit_engine"

  curl -s -XPOST "${HOST}/api/v1/indexes" \
    --header "content-type: application/yaml" \
    --data-binary @./quickwit/index-config.yaml >/dev/null


  if [ ! -f ./quickwit/data_formatted/0.splitted.aaa ]; then
    i=0

    allCount=$(ls -la ./data/trips.csv.* | wc -l)

    echo -e "\t\tStart preparing chunks"

    for f in ./data/trips.csv.*; do

      echo -e "\t\t\tProcessing chunk ($i/$allCount)"

      echo -e "\t\t\t\t Morph CSV to JSONL $f -> ./quickwit/data_formatted/$i.jsonl"
      php ./quickwit/csv_jsonl.php "$f" "./quickwit/data_formatted/$i.jsonl"

      echo -e "\t\t\t\t Split chunk to 7k lines sub chunks"
      split -l 7000 -a 3 ./quickwit/data_formatted/$i.jsonl ./quickwit/data_formatted/$i.splitted.

      rm "./quickwit/data_formatted/$i.jsonl"
      echo -e "\t\t\t\tFinish Processing"

      ((i++))
    done
  fi


  echo -en "\tStarting loading at "
  date
  for f in ./quickwit/data_formatted/*.splitted.*; do
    echo -e "\t\tUpload chunk $f"

    # Index our 7k documents.
    curl -s -XPOST "${HOST}/api/v1/taxi/ingest?commit=force" --data-binary @$f 2>&1 \
    | jq -r tostring | grep -v '{"num_docs_for_processing":7000}'

# TODO uncomment after tests will fixed
#    rm $f
  done
  echo -en "\tFinished loading to index at "
  date

  echo -e "\tFinished"
else

  echo -e "\tNo need to rebuild"
fi
